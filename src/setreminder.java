
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author intag
 */
public class setreminder extends javax.swing.JFrame {

    String concated;
    Connection cn;

    Statement stmt;
    ResultSet rs;

    String databasename = "set_reminder";
    String url = "jdbc:mysql://localhost:3306/set_reminder";
    String username = "root";
    String password = "plmn@#$_0987";

    Scanner sc = new Scanner(System.in);
    DateFormat df = new SimpleDateFormat("MMM d, yyyy");
    DateFormat tm = new SimpleDateFormat("hh:mm aa");
    Date d = new Date();
    Calendar c = Calendar.getInstance();
    int hour = c.get(Calendar.HOUR_OF_DAY);
    int min = c.get(Calendar.MINUTE);
    int sec = c.get(Calendar.SECOND);

    public String time;
    public String meddetail;
    public String medname;
    public String showt;

    String time1;
    String time2;

    DateTimeFormatter formatter;
    LocalTime t1;
    LocalTime t2;

    AudioInputStream ais;

    public setreminder() {

        initComponents();
        setLocationRelativeTo(null);
        daterem.setText(" " + df.format(d));
        deftime1.setText(df.format(d));
        String deftime = deftime1.getText();
        settime();
        ImageIcon ic = new ImageIcon(this.getClass().getResource("BELL1.png"));
        Image img = ic.getImage();
        Image imgsc = img.getScaledInstance(img_rem.getWidth(), img_rem.getHeight(), Image.SCALE_SMOOTH);
        img_rem.setIcon(ic);

    }

    public void music() throws Exception {

        File f = new File("wisalarm.wav");
        ais = AudioSystem.getAudioInputStream(f);
        Clip clp = AudioSystem.getClip();
        clp.start();
//        Scanner sc = new Scanner(System.in);
//        String bbb = sc.next();

    }

    public void set_database() throws ClassNotFoundException, SQLException {

        cn = DriverManager.getConnection(url, username, password);
        System.out.println("successs");
        if (cn != null) {
            System.out.println("connection done");

        }

    }

    public void close() {
        WindowEvent cwin = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(cwin);

    }

    public void clear() {
        mname.setText("");
        mdetail.setText("");
        helotime.setText("");
        datechoose.setDateFormatString(null);
    }

    public void settime() {

        String time = tm.format(d);
        timerem.setText(time);

    }

    public void insertion() {
        try {
            stmt = cn.createStatement();
            medname = mname.getText();
            meddetail = mdetail.getText();
            showt = helotime.getText();
            daterem.setText(" " + df.format(d));
            // d = datechoose.getDate();

            String deftime = deftime1.getText();

            stmt.executeUpdate("insert into set_reminder.set1 values  ('" + medname + "' , '" + meddetail + "','" + showt + "','" + deftime + "')");

            stmt.executeUpdate("insert into set_reminder.history12 values  ('" + medname + "' , '" + meddetail + "','" + showt + "','" + deftime + "')");

            JOptionPane.showMessageDialog(this, "REMINDER FOR " + medname.toUpperCase() + " MEDICINE IS SET");

        } catch (HeadlessException e) {

            JOptionPane.showMessageDialog(this, "ERROR IN CODE");
        } catch (SQLException e) {
            System.out.println(e);
          //  JOptionPane.showMessageDialog(this, "KINDLY, CHANGE MEDICINE NAME\n"
            //        + "KINDLY FILL FULL FORM");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timepick = new com.raven.swing.TimePicker();
        jLabel1 = new javax.swing.JLabel();
        daterem = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        timerem = new javax.swing.JTextField();
        mname = new javax.swing.JTextField();
        mdetail = new javax.swing.JTextField();
        cleafrset = new javax.swing.JButton();
        savedba = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        choosetime = new javax.swing.JButton();
        timeset = new javax.swing.JButton();
        helotime = new javax.swing.JTextField();
        img_rem = new javax.swing.JLabel();
        deftime1 = new javax.swing.JTextField();

        timepick.setDisplayText(helotime);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SET REMINDER");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 330, 47));

        daterem.setEditable(false);
        daterem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateremActionPerformed(evt);
            }
        });
        getContentPane().add(daterem, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 100, 186, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("CURRENT DATE:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 133, 36));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("MEDICINE NAME:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 133, 36));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("DATE:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 430, 90, 40));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("DETAILS:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, 124, 36));

        timerem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeremActionPerformed(evt);
            }
        });
        getContentPane().add(timerem, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 150, 186, -1));

        mname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnameActionPerformed(evt);
            }
        });
        getContentPane().add(mname, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, 189, -1));

        mdetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mdetailActionPerformed(evt);
            }
        });
        getContentPane().add(mdetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, 186, -1));

        cleafrset.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        cleafrset.setText("CLEAR");
        cleafrset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleafrsetActionPerformed(evt);
            }
        });
        getContentPane().add(cleafrset, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 510, -1, -1));

        savedba.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        savedba.setText("SAVE");
        savedba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savedbaActionPerformed(evt);
            }
        });
        getContentPane().add(savedba, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 510, -1, -1));

        jButton3.setText("<--");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        choosetime.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        choosetime.setText("TIME");
        choosetime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosetimeActionPerformed(evt);
            }
        });
        getContentPane().add(choosetime, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 80, -1));

        timeset.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        timeset.setText("CURRENT TIME:");
        timeset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesetActionPerformed(evt);
            }
        });
        getContentPane().add(timeset, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, -1, -1));

        helotime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helotimeActionPerformed(evt);
            }
        });
        getContentPane().add(helotime, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 370, 180, -1));
        getContentPane().add(img_rem, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, 220, 580));

        deftime1.setEditable(false);
        deftime1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deftime1ActionPerformed(evt);
            }
        });
        getContentPane().add(deftime1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 430, 180, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dateremActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateremActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateremActionPerformed

    private void timeremActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeremActionPerformed

    }//GEN-LAST:event_timeremActionPerformed

    private void mnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnameActionPerformed


    }//GEN-LAST:event_mnameActionPerformed

    private void cleafrsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleafrsetActionPerformed
        clear();
    }//GEN-LAST:event_cleafrsetActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        close();
        Interface_App app = new Interface_App();
        app.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void mdetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mdetailActionPerformed


    }//GEN-LAST:event_mdetailActionPerformed

    private void choosetimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosetimeActionPerformed
        timepick.showPopup(this, 50, 50);
    }//GEN-LAST:event_choosetimeActionPerformed

    private void timesetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timesetActionPerformed
        settime();

    }//GEN-LAST:event_timesetActionPerformed

    private void savedbaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savedbaActionPerformed
        try {
            set_database();
            insertion();

            set_database();

            stmt = cn.createStatement();
            String query = "SELECT * FROM `set1`";
            rs = stmt.executeQuery(query);

            while (rs.next()) {

                String mname1 = rs.getString("medname");
                String meddetail1 = rs.getString("meddetails");
                time1 = tm.format(d);
                time2 = rs.getString("Time");
                System.out.println("t1: " + time1);
                System.out.println("t2: " + time2);

                boolean equal = true;

                if (time1.length() == time2.length()) {
                    for (int i = 0; i < time1.length(); i++) {
                        char c1 = time1.charAt(i);
                        char c2 = time2.charAt(i);
                        if (c1 != c2) {
                            equal = false;
                            break;
                        }
                    }
                } else {
                    equal = false;
                }

                if (equal && !time2.contains("P")) {
                    Toolkit.getDefaultToolkit().beep();
                    this.music();
                    JOptionPane.showMessageDialog(this, "PLEASE, TAKE YOUR MEDICINE: " + mname1.toUpperCase() + " \t & DETAIL IS: " + meddetail1.toUpperCase());
                } else {
                    char a1 = time1.charAt(0);
                    System.out.println("a1   :  " + a1);
                    char a2 = time1.charAt(1);
                    System.out.println("a2   :  " + a2);
                    char a3 = time1.charAt(3);
                    System.out.println("a3   :  " + a3);
                    char a4 = time1.charAt(4);
                    System.out.println("a4   :  " + a4);
                    char[] c1 = {a1, a2, a3, a4};

                    char b1 = time2.charAt(0);
                    System.out.println("b1   :  " + b1);
                    char b2 = time2.charAt(1);
                    System.out.println("b2   :  " + b2);
                    char b3 = time2.charAt(3);
                    System.out.println("b3   :  " + b3);
                    char b4 = time2.charAt(4);
                    System.out.println("b4   :  " + b4);
                    char[] c2 = {b1, b2, b3, b4};

                    if (!(time2.contains("P"))) {

                        String concatenatedString1 = String.valueOf(a1) + String.valueOf(a2);
                        System.out.println("string 1:  " + concatenatedString1);
                        String concatenatedString2 = String.valueOf(a3) + String.valueOf(a4);
                        System.out.println("string 2:  " + concatenatedString2);
                        String concatenatedString3 = String.valueOf(b1) + String.valueOf(b2);
                        System.out.println("string 3:  " + concatenatedString3);
                        String concatenatedString4 = String.valueOf(b3) + String.valueOf(b4);
                        System.out.println("string 4:  " + concatenatedString4);

                        int num1 = Integer.parseInt(concatenatedString1);
                        System.out.println("num 1:  " + num1);
                        int num2 = Integer.parseInt(concatenatedString2);
                        System.out.println("num 2:  " + num2);
                        int num3 = Integer.parseInt(concatenatedString3);
                        System.out.println("num 3:  " + num3);
                        int num4 = Integer.parseInt(concatenatedString4);
                        System.out.println("num 4:  " + num4);

                        long startTime = (num1 * 60 * 60 * 1000) + (num2 * 60 * 1000);
                        System.out.println("Start Time: " + startTime);
                        long endTime = (num3 * 60 * 60 * 1000) + (num4 * 60 * 1000);
                        System.out.println("End Time: " + endTime);

                        if (endTime > startTime) {
                            long duration = endTime - startTime;
                            System.out.println("Duration: " + duration);
                            Thread d = new Thread(() -> {
                                try {
                                    Thread.sleep(duration);
                                    Toolkit.getDefaultToolkit().beep();
                                    music();
                                    JOptionPane.showMessageDialog(this, "Kindly, TAKE YOUR MEDICINE: " + mname1.toUpperCase() + "\t & DETAIL IS: " + meddetail1.toUpperCase());
                                } catch (Exception e) {
                                    System.out.println("new error thread: " + e);
                                }
                            });
                            d.start();
                        }
                    }
                }
            }

//                          formatter = DateTimeFormatter.ofPattern("hh:mm a");
//                          t1 = LocalTime.parse(time1, formatter);
//                          System.out.println("database: "+t1);
//                          t2 = LocalTime.parse(time2, formatter);
//                        System.out.println("system: "+t2);
//                
//                         if(t1.equals(t2)){
//                             JOptionPane.showMessageDialog(this, "PLEASE, TAKE YOUR MEDICINE");
//                             break;
//                         }     
//                         
//                         else{
//     
//                             String t3= t1.toString();
//                             String t4 =t2.toString();
//                             
//                             String[] p1 = t3.split(":");
//                             String h1 = p1[0];
//                             String m1 = p1[1];
//                             
//                             int num1 = Integer.parseInt(h1);
//                             int num2 = Integer.parseInt(m1);
//                             
//                             String[] p2 = t4.split(":");
//                             String h2 = p2[0];
//                             String m2 = p2[1];
//                             int num3 = Integer.parseInt(h2);
//                             int num4 = Integer.parseInt(m2);
//                             
//                             long startTime = (num1 * 60 * 60 * 1000) + (num2 * 60 * 1000);
//                             System.out.println(startTime);
//                             long endTime = (num3 * 60 * 60 * 1000) + (num4 * 60 * 1000);
//                             System.out.println(endTime);
//                             
//                             
//                             if(endTime>startTime){
//                             long duration = endTime - startTime;
//                             System.out.println(duration);
//                             Thread d = new Thread(() -> {    
//                        
//                                 try {
//                                     Thread.sleep(duration);
//                                     JOptionPane.showMessageDialog(this, "KINDLY TAKE YOUR MEDICINE");
//                                 } catch (InterruptedException ex) {
//                                     System.out.println("new error thread");
//                                 }
//                             });  
//                             d.start();
//                                     }
//                         }
//                     }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "KINDLY ENTER ALL VALUES" +
                    "\n OR \n CHANGE NAME OF MEDICINE");
            System.out.println(e);
        }

    }//GEN-LAST:event_savedbaActionPerformed

    private void helotimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helotimeActionPerformed

    }//GEN-LAST:event_helotimeActionPerformed

    private void deftime1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deftime1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deftime1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(set_reminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(set_reminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(set_reminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(set_reminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new setreminder().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton choosetime;
    private javax.swing.JButton cleafrset;
    private javax.swing.JTextField daterem;
    private javax.swing.JTextField deftime1;
    private javax.swing.JTextField helotime;
    private javax.swing.JLabel img_rem;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField mdetail;
    private javax.swing.JTextField mname;
    private javax.swing.JButton savedba;
    private com.raven.swing.TimePicker timepick;
    private javax.swing.JTextField timerem;
    private javax.swing.JButton timeset;
    // End of variables declaration//GEN-END:variables
}
